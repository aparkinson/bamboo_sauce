<?xml version="1.0" encoding="UTF-8"?>
<project name="dummy" default="test" basedir=".">
    <!-- ************************************************************ -->
    <!-- ******************* PROPERTIES AND PATHS ******************* -->
    <!-- ************************************************************ -->

    <path id="classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
            <exclude name="**/asm-2.2.1.jar"/>
            <exclude name="**/asm-3.0.jar"/>
        </fileset>
        <pathelement location="${classes.dir}"/>
        <pathelement location="${test.classes.dir}"/>
        <pathelement location="${web.classes.dir}"/>
        <pathelement location="${lib.dir}"/>
    </path>
    
    <target name="clean" description="Removes the directories created by previous runs of the build script">
        <delete>
            <fileset dir=".">
                <include name="mycoverage*"/>
            </fileset>
        </delete>
        <delete dir="${classes.dir}"/>
        <delete dir="${jar.dir}"/>
        <delete dir="${dist.dir}" failonerror="false"/>
        <delete dir="${test.classes.dir}"/>
        <delete dir="${web.classes.dir}"/>
        <delete dir="${instrumented.dir}"/>
        <delete dir="${reports.xml.dir}"/>
        <delete dir="${reports.html.dir}"/>
        <delete dir="${reports.pmd.dir}"/>
        <delete dir="${coverage.xml.dir}"/>
        <delete dir="${coverage.html.dir}"/>
        <delete file="cobertura.log"/>
        <delete file="cobertura.ser"/>
        <delete file="hibernate/au"/>
    </target>


    <target name="compile" depends="init" description="Compiles the source files">
        <javac destdir="${classes.dir}" debug="${javac.debug}" classpathref="classpath">
            <src path="${src.dir}/business"/>
            <src path="${src.dir}/persistence"/>
        </javac>
        <javac destdir="${web.classes.dir}" debug="${javac.debug}" classpathref="classpath">
            <src path="${src.dir}/web"/>
        </javac>
        <copy todir="${web.classes.dir}">
            <fileset dir="${src.dir}/web">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <copy todir="${classes.dir}">
            <fileset dir="${src.dir}/persistence">
                <exclude name="**/*.java"/>
            </fileset>
            <fileset dir="${src.dir}/business">
                <exclude name="**/*.java"/>
            </fileset>
            <fileset dir="${src.dir}/web">
                <exclude name="**/*.java"/>
            </fileset>
            <!-- TODO we will need to externalize the testing related classes when we build distributables -->
            <fileset dir="${test.resource.dir}">
                <include name="cre8_tables.sql"/>
                <include name="drop_tables.sql"/>
                <include name="test_data.sql"/>
            </fileset>
        </copy>
    </target>

    <!-- ************************************************************ -->
    <!-- ******************** WEB LAYER .WAR FILE ******************* -->
    <!-- ************************************************************ -->
    <target name="war" depends="compile,set-version" description="Builds the WAR file">
        <war warfile="${dist.dir}/${app.name}.war" webxml="${web.dir}/WEB-INF/web.xml">
            <lib dir="${web.dir}/WEB-INF/lib">
                <include name="*.jar"/>
                <!-- do not include the commons-logging jar, since it is already in JBoss and -->
                <!-- may cause classloader issues if it's included here -->
                <exclude name="commons-logging-1.0.4.jar"/>
            </lib>
            <classes dir="${web.classes.dir}"/>
            <zipfileset dir="${web.dir}/WEB-INF/classes" prefix="WEB-INF/classes"/>
            <zipfileset dir="${web.dir}/WEB-INF/jsp" prefix="WEB-INF/jsp"/>
            <zipfileset dir="${web.dir}/images" prefix="images"/>
            <zipfileset dir="${web.dir}/help" prefix="help"/>
            <zipfileset dir="${web.dir}/styles" prefix="styles"/>
            <zipfileset dir="${web.dir}/scripts" prefix="scripts"/>
            <zipfileset dir="${web.dir}">
                <include name="index.html"/>
                <include name="version.properties"/>
            </zipfileset>
            <zipfileset dir="${web.dir}/WEB-INF" prefix="WEB-INF">
                <include name="aisaid.tld"/>
            </zipfileset>
        </war>
    </target>


    <target name="test.junit" depends="compile-test" description="Runs the Unit tests">
        <junit fork="yes" printsummary="on" failureProperty="test.failure" haltonerror="false">
            <classpath location="${instrumented.dir}"/>
            <classpath location="${test.classes.dir}"/>
            <classpath location="hibernate"/>
            <classpath refid="classpath"/>
            <formatter type="xml" usefile="true"/>
            <batchtest todir="${reports.xml.dir}" fork="yes">
                <fileset dir="${src.dir}/test">
                    <include name="**/HibernateTestSuite.java"/>
                    <include name="**/utils/*.java"/>
                    <exclude name="**/AllTests.java"/>
                    <!-- session layer tests need to be tested using test.cactus -->
                    <exclude name="**/service/*.java"/>
                    <exclude name="**/TestAirportDataSheet.java"/>
                    <exclude name="**/TestAisaid.java"/>
                </fileset>
            </batchtest>
        </junit>
        <junitreport todir="${reports.xml.dir}">
            <fileset dir="${reports.xml.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${reports.html.dir}"/>
        </junitreport>
        <!-- cleanup -->
        <delete dir="hibernate/au"/>
    </target>

    <target name="compile-test" depends="compile" description="Compiles the test files">
        <javac destdir="${test.classes.dir}" debug="${javac.debug}" srcdir="${test.src.dir}" classpathref="classpath"/>
        <copy todir="${test.classes.dir}/WEB-INF/classes">
            <fileset dir="${test.classes.dir}">
                <include name="**/service/*.class"/>
                <include name="**/web/*.class"/>
            </fileset>
        </copy>
        <copy todir="${test.classes.dir}">
            <fileset dir="${test.resource.dir}"/>
            <fileset dir="${test.src.dir}">
                <exclude name="**/*.java"/>
                <exclude name="resources/**/*.*"/>
            </fileset>
        </copy>
    </target>


</project>
